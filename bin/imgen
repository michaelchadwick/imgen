#!/usr/bin/env ruby

require 'rmagick'
require 'optparse'
require 'fileutils'

require_relative '../lib/imgen/version'

BINARY_NAME = $PROGRAM_NAME.split('/').last

def parse_options
  options = {:width => 100, :height => 100, :display => false}

  optparse = OptionParser.new do |opts|
    opts.banner = 'usage: imgen [-w, --width WIDTH] [-h, --height HEIGHT] [--display]'

    opts.on('-w', '--width WIDTH_OF_IMAGE', 'Width of image to create') do |w|
      options[:width] = w
    end

    opts.on('-h', '--height HEIGHT_OF_IMAGE', 'Height of image to create') do |h|
      options[:height] = h
    end

    opts.on('--display', 'Display image using X11 after creation') do |bg|
      options[:display] = true
    end

    opts.on('-v', '--version', 'Display version number and exit') do
      puts "#{BINARY_NAME} #{Imgen::VERSION}"
      exit
    end

    opts.on('--help', 'Display this screen and exit') do
      puts opts
      exit
    end
  end

  options[:usage] = optparse.to_s
  optparse.parse!()

  return options
end

def print_error(error)
  case error
  when OptionParser::InvalidOption
    puts "#{BINARY_NAME}: illegal option #{error.args.join(' ')}"
  else
    puts "An unexpected error occurred while running #{BINARY_NAME}:"
    puts "  #{error}\n"
  end
end

begin
  options = parse_options

  img = Magick::Image.new(options[:width].to_i, options[:height].to_i)
  colors = {r: 0, g: 0, b: 0}

  color_dominant = colors.keys.to_a.sample

  (0..img.columns).each do |x|
    (0..img.rows).each do |y|
      red = (color_dominant == :r) ? rand(0..100) : 0
      green = (color_dominant == :g) ? rand(0..100) : 0
      blue = (color_dominant == :b) ? rand(0..100) : 0
      alpha = rand(0..100)
      img.pixel_color(x,y,"rgba(#{red}%, #{green}%, #{blue}%, #{alpha}%)")
    end
  end

  img_dir = "img"
  img_ext = "png"

  unless File.directory?(img_dir)
    FileUtils.mkdir_p(img_dir)
  end

  counter = 0
  img_uniq = ""
  filename_path = "#{img_dir}/#{options[:width]}x#{options[:height]}#{img_uniq}.#{img_ext}"

  until !File.exists?(filename_path)
    counter += 1
    img_uniq = "_" + counter.to_s
    filename_path = "#{img_dir}/#{options[:width]}x#{options[:height]}#{img_uniq}.#{img_ext}"
  end

  puts "writing #{filename_path} to disk"
  img.write(filename_path)

  if options[:display]
    puts "displaying #{filename_path} in X11..."
    img.display
  end
rescue => error
  print_error(error)
  exit(false)
end
