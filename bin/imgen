#!/usr/bin/env ruby

require 'optparse'

require_relative '../lib/imgen'
require_relative '../lib/imgen/version'

BINARY_NAME = $PROGRAM_NAME.split('/').last

def parse_options
  options = {
    :width => 100,
    :height => 100,
    :directory => 'img',
    :format => 'png',
    :quantity => 1,
    :method => :noise,
    :debug => false,
    :display => false
  }

  optparse = OptionParser.new do |opts|
    opts.banner = "Generate images on the command line\n"
    opts.banner += "usage: imgen [-w, --width WIDTH] [-h, --height HEIGHT] [-d, --directory IMG_DIRECTORY] [-f, --format IMG_FORMAT] [-q, --quantity QUANTITY] [-m, --method GEN_METHOD] [--debug] [--display]\n\n"

    opts.on('-w', '--width WIDTH_OF_IMAGE', Integer, 'Width of image in pixels (Default: 100)') do |w|
      options[:width] = w.to_i
    end

    opts.on('-h', '--height HEIGHT_OF_IMAGE', Integer, 'Height of image in pixels (Default: 100)') do |h|
      options[:height] = h.to_i
    end

    opts.on('-d', '--directory IMG_DIRECTORY', 'Subdirectory to put generated images (Default: ./img)') do |d|
      options[:directory] = d
    end

    opts.on('-f', '--format IMG_FORMAT', [:bmp, :gif, :jpg, :png], 'Image format (bmp|gif|jpg|png) (Default: png)') do |f|
      options[:format] = f
    end

    opts.on('-q', '--quantity QUANTITY', 'Number of images to create (Default: 1)') do |q|
      options[:quantity] = q.to_i
    end

    opts.on('-m', '--method METHOD', [:noise, :lines], 'Image generation method (Default: noise)') do |m|
      options[:method] = m
    end

    opts.on('--debug', 'Display pixel debug information') do |debug|
      options[:debug] = true
    end

    opts.on('--display', 'Display image using X11 after creation') do |bg|
      options[:display] = true
    end

    opts.on('-v', '--version', 'Display version number and exit') do
      puts "#{BINARY_NAME} #{Imgen::VERSION}"
      exit
    end

    opts.on('--help', 'Display this screen and exit') do
      puts opts
      exit
    end
  end

  options[:usage] = optparse.to_s
  optparse.parse!()

  return options
end

def print_error(error)
  case error
  when OptionParser::InvalidOption
    puts "#{BINARY_NAME}: illegal option #{error.args.join(' ')}"
  else
    puts "An unexpected error occurred while running #{BINARY_NAME}:"
    puts "  #{error}\n"
  end
end

begin
  options = parse_options

  Imgen::Image.new(options)
rescue => error
  print_error(error)
  exit(false)
end
